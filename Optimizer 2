import pandas as pd
import numpy as np
from datetime import datetime
import warnings
from tqdm import tqdm
import time

warnings.filterwarnings('ignore', category=FutureWarning)

# Load and Prepare Loan Data
loan_data = pd.read_csv('/Users/estebandelsolar/Downloads/January_HELOC_Production_Tape_2024.csv', low_memory=False)

# Calculate the state with the highest total principal balance and set property_state concentration limit
state_with_highest_balance = loan_data.groupby('property_state')['prin_bal'].sum().idxmax()

# Adjustable Criteria
absolute_prin_bal_limit = 11_000_000
criteria = {
    "concentration_limits": {
        "orig_credit_score": {"<700": 0.30, "<680": 0.15},
        "original_cltv": {">0.80": 0.20},
        "lien_position_granular": {"3": 0.03},
        "property_state": {state_with_highest_balance: 0.30},
        "occupancy_type": {"NON_PRIMARY_RESIDENCE": 0.10},
    },
    "wa_limits": {"original_dti_rate": 0.40, "original_cltv": 0.70, "orig_credit_score": 735},
    "max_figure_pct": 5,
    "min_loans_threshold": 1,
}

def evaluate_condition(data, column, condition):
    if '<' in condition:
        return data[column] < float(condition[1:])
    elif '>' in condition:
        return data[column] > float(condition[1:])
    return data[column].astype(str) == condition

def calculate_concentration_percentages(data, limits):
    total_bal = data['prin_bal'].sum()
    return {f"{col}_{cond}": (data[evaluate_condition(data, col, cond)]['prin_bal'].sum() / total_bal) * 100
            for col, cond_dict in limits.items()
            for cond in cond_dict}

def calculate_weighted_averages(data, wa_limits):
    total_bal = data['prin_bal'].sum()
    return {metric: (data[metric] * data['prin_bal']).sum() / total_bal for metric in wa_limits}

def criteria_satisfied(data, criteria):
    total_bal = data['prin_bal'].sum()
    concentration_percentages = calculate_concentration_percentages(data, criteria['concentration_limits'])
    wa_metrics = calculate_weighted_averages(data, criteria['wa_limits'])

    for col, cond_dict in criteria['concentration_limits'].items():
        for cond, limit_pct in cond_dict.items():
            if concentration_percentages[f"{col}_{cond}"] > limit_pct * 100:
                return False

    for metric, target in criteria['wa_limits'].items():
        if 'score' in metric:
            if wa_metrics[metric] < target:
                return False
        else:
            if wa_metrics[metric] > target:
                return False

    return True

def adjust_loans(data, criteria, total_bal_limit=absolute_prin_bal_limit, pbar=None):
    total_bal = data['prin_bal'].sum()
    removed_loans = pd.DataFrame(columns=data.columns)
    data.sort_values(by=['originator_name', 'prin_bal'], ascending=[False, True], inplace=True)

    def remove_loan(loan):
        nonlocal total_bal, removed_loans
        removed_loans = pd.concat([removed_loans, pd.DataFrame([loan])], ignore_index=True)
        data.drop(loan.name, inplace=True)
        total_bal = data['prin_bal'].sum()
        if pbar is not None:
            pbar.update(1)

    def enforce_limit(column, condition, limit_pct):
        nonlocal total_bal
        while (data[evaluate_condition(data, column, condition)]['prin_bal'].sum() / total_bal) * 100 > limit_pct:
            loan_to_remove = data[evaluate_condition(data, column, condition)].sort_values(
                by=['originator_name', 'prin_bal'], ascending=[True, False]).iloc[0]
            remove_loan(loan_to_remove)

    # Enforce 3rd lien concentration limit
    if "lien_position_granular" in criteria["concentration_limits"]:
        third_lien_limit = criteria["concentration_limits"]["lien_position_granular"].get("3", None)
        if third_lien_limit:
            enforce_limit("lien_position_granular", "3", third_lien_limit * 100)

    # Enforce maximum percentage for FIGURE loans
    figure_limit = criteria['max_figure_pct']
    while (data[data['originator_name'] == 'FIGURE']['prin_bal'].sum() / total_bal) * 100 > figure_limit:
        loan_to_remove = data[data['originator_name'] == 'FIGURE'].sort_values(by='prin_bal', ascending=False).iloc[0]
        remove_loan(loan_to_remove)

    # Enforce other concentration limits
    for col, cond_dict in criteria["concentration_limits"].items():
        for cond, limit_pct in cond_dict.items():
            enforce_limit(col, cond, limit_pct * 100)

    # Enforce WA limits
    for metric, target in criteria["wa_limits"].items():
        while (data[metric] * data['prin_bal']).sum() / total_bal > target and total_bal > total_bal_limit:
            loan_to_remove = data.sort_values(by=[metric, 'originator_name'], ascending=(metric != 'orig_credit_score')).iloc[0]
            remove_loan(loan_to_remove)

    return data, removed_loans

def add_loans_back(data, removed_loans, criteria, total_bal_limit):
    total_bal = data['prin_bal'].sum()

    for loan in removed_loans.itertuples():
        potential_data = pd.concat([data, pd.DataFrame([loan._asdict()])], ignore_index=True)
        potential_bal = potential_data['prin_bal'].sum()
        potential_concentration_percentages = calculate_concentration_percentages(potential_data, criteria['concentration_limits'])
        potential_wa_metrics = calculate_weighted_averages(potential_data, criteria['wa_limits'])

        if (potential_bal <= total_bal_limit * 1.025 and 
            all(potential_concentration_percentages[f"{col}_{cond}"] <= limit_pct * 100
                for col, cond_dict in criteria['concentration_limits'].items()
                for cond, limit_pct in cond_dict.items()) and
            all(potential_wa_metrics[metric] <= target if 'score' not in metric else potential_wa_metrics[metric] >= target
                for metric, target in criteria['wa_limits'].items())):
            data = potential_data
            total_bal = potential_bal

    return data

# Convert columns to appropriate formats
date_format = "%Y-%m-%d"
loan_data['orig_date'] = pd.to_datetime(loan_data['orig_date'], format=date_format, errors='coerce')
loan_data['borrower_orig_fico_dt'] = pd.to_datetime(loan_data['borrower_orig_fico_dt'], format=date_format, errors='coerce')
loan_data['cutoff_date'] = pd.to_datetime(loan_data['cutoff_date'], format=date_format, errors='coerce')
loan_data['prin_bal'] = pd.to_numeric(loan_data['prin_bal'], errors='coerce')
loan_data['orig_credit_score'] = pd.to_numeric(loan_data['orig_credit_score'], errors='coerce')
loan_data['original_cltv'] = pd.to_numeric(loan_data['original_cltv'], errors='coerce')
loan_data['original_dti_rate'] = pd.to_numeric(loan_data['original_dti_rate'], errors='coerce')

# Initial calculations and summaries
initial_concentration_percentages = calculate_concentration_percentages(loan_data, criteria['concentration_limits'])
total_initial_bal = loan_data['prin_bal'].sum()
initial_wa_metrics = calculate_weighted_averages(loan_data, criteria['wa_limits'])

print("Initial Dataset Summary:")
print(f"Number of Loans: {loan_data.shape[0]}")
print(f"Total Balance of Included Loans: ${total_initial_bal:,.2f}")
for metric, value in initial_wa_metrics.items():
    print(f"Weighted Average {metric.replace('_', ' ').title()}: {value:.2f}")

print("\nInitial Concentration Percentages:")
for condition, pct in initial_concentration_percentages.items():
    print(f"{condition}: {pct:.2f}%")

def calculate_originator_contributions(data):
    originator_balances = data.groupby('originator_name')['prin_bal'].sum()
    total_bal = data['prin_bal'].sum()
    return {originator: {'$': f"${balance:,.2f}", '%': f"{(balance / total_bal * 100):.2f}%"}
            for originator, balance in originator_balances.items()}

initial_originator_contributions = calculate_originator_contributions(loan_data)
print("\nInitial Originator Contributions:")
for originator, info in initial_originator_contributions.items():
    print(f"{originator}: {info['$']} ({info['%']})")

# Filtered data
originators_to_include = ['MOVEMENT', 'FIGURE']
filtered_loan_data = loan_data[loan_data['originator_name'].isin(originators_to_include)]
filtered_concentration_percentages = calculate_concentration_percentages(filtered_loan_data, criteria['concentration_limits'])
filtered_total_initial_bal = filtered_loan_data['prin_bal'].sum()
filtered_wa_metrics = calculate_weighted_averages(filtered_loan_data, criteria['wa_limits'])

print("\nFiltered Dataset Summary Before Adjustments:")
print(f"Number of Loans: {filtered_loan_data.shape[0]}")
print(f"Total Balance of Included Loans: ${filtered_total_initial_bal:,.2f}")
for metric, value in filtered_wa_metrics.items():
    print(f"Weighted Average {metric.replace('_', ' ').title()}: {value:.2f}")

print("\nFiltered Initial Concentration Percentages:")
for condition, pct in filtered_concentration_percentages.items():
    print(f"{condition}: {pct:.2f}%")

filtered_originator_contributions = calculate_originator_contributions(filtered_loan_data)
print("\nFiltered Originator Contributions:")
for originator, info in filtered_originator_contributions.items():
    print(f"{originator}: {info['$']} ({info['%']})")

# Adjust data to meet criteria with progress bar
print("\nAdjusting loans to meet criteria...")
start_time = time.time()

# Estimate the number of iterations based on the number of rows in the filtered data
estimated_iterations = len(filtered_loan_data)

# Initial removal and add back loop
for i in range(1):  # Perform the removal and add-back process three times
    with tqdm(total=estimated_iterations, desc=f'Processing Loans - Iteration {i+1}', ncols=100) as pbar:
        adjusted_loan_data, removed_loans = adjust_loans(filtered_loan_data.copy(), criteria, pbar=pbar)
    adjusted_loan_data = add_loans_back(adjusted_loan_data, removed_loans, criteria, absolute_prin_bal_limit)

adjusted_wa_metrics = calculate_weighted_averages(adjusted_loan_data, criteria['wa_limits'])
adjusted_concentration_percentages = calculate_concentration_percentages(adjusted_loan_data, criteria['concentration_limits'])

print("\nAdjusted Dataset Summary:")
print(f"Number of Loans: {adjusted_loan_data.shape[0]}")
print(f"Total Balance of Included Loans: ${adjusted_loan_data['prin_bal'].sum():,.2f}")
for metric, value in adjusted_wa_metrics.items():
    print(f"Weighted Average {metric.replace('_', ' ').title()}: {value:.2f}")

print("\nAdjusted Concentration Percentages:")
for condition, pct in adjusted_concentration_percentages.items():
    print(f"{condition}: {pct:.2f}%")

adjusted_originator_contributions = calculate_originator_contributions(adjusted_loan_data)
print("\nAdjusted Originator Contributions:")
for originator, info in adjusted_originator_contributions.items():
    print(f"{originator}: {info['$']} ({info['%']})")

removed_concentration_percentages = calculate_concentration_percentages(removed_loans, criteria['concentration_limits'])
removed_total_bal = removed_loans['prin_bal'].sum()
removed_wa_metrics = calculate_weighted_averages(removed_loans, criteria['wa_limits'])

print("\nRemoved Loans Summary:")
print(f"Number of Removed Loans: {removed_loans.shape[0]}")
print(f"Total Balance of Removed Loans: ${removed_total_bal:,.2f}")
for metric, value in removed_wa_metrics.items():
    print(f"Weighted Average {metric.replace('_', ' ').title()}: {value:.2f}")

print("\nRemoved Concentration Percentages:")
for condition, pct in removed_concentration_percentages.items():
    print(f"{condition}: {pct:.2f}%")

removed_originator_contributions = calculate_originator_contributions(removed_loans)
print("\nRemoved Originator Contributions:")
for originator, info in removed_originator_contributions.items():
    print(f"{originator}: {info['$']} ({info['%']})")

# Save the adjusted data to a new CSV
adjusted_loan_data.to_csv('/Users/estebandelsolar/Desktop/Python_Files/outputs/Adjusted_Loans.csv', index=False)
print("Adjusted loans saved to /Users/estebandelsolar/Desktop/Python_Files/outputs/Adjusted_Loans.csv")

# Save the removed loans to another CSV
removed_loans.to_csv('/Users/estebandelsolar/Desktop/Python_Files/outputs/Removed_Loans.csv', index=False)
print("Removed loans saved to /Users/estebandelsolar/Desktop/Python_Files/outputs/Removed_Loans.csv")

end_time = time.time()
elapsed_time = end_time - start_time
print(f"Elapsed time: {elapsed_time:.2f} seconds")
